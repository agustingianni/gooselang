%{

%}

// Keywords.
%token AND BREAK CONTINUE DO ELSE FALSE FOR IF
%token IN LET MATCH MODULE NOT OPEN OR STRUCT
%token THEN TO TRUE UNION UNIT WHILE TUPLE ARRAY DICT
%token LAZY LAMBDA ASSERT

// Operators.
%token MINUS COMMA SEMI COLON BANG LPAREN RPAREN
%token LCURLY RCURLY STAR DIV AMP MOD PLUS
%token LT LTE EQ GT GTE WAVE ARROW
%token LBRACK RBRACK DOT_DOT INC DEC LSHIFT
%token RSHIFT NE HAT ASSIGN BAR

%token EOF

// Numeric constants.
%token <sbyte> INT8
%token <int16> INT16
%token <int32> INT32
%token <int64> INT64
%token <byte> UINT8
%token <uint16> UINT16
%token <uint32> UINT32
%token <uint64> UINT64
%token <single> IEEE32
%token <double> IEEE64

%token <string> IDENT
%token <string> STRING

%type <AST.Program> program

// Operator precedence, from lower to higher.
%left BAR
%left HAT
%left AMP
%left EQ NE
%left LT LTE GT GTE
%left LSHIFT RSHIFT
%left MINUS PLUS
%left MOD DIV STAR
%left PINC PDEC WAVE BANG PMIN
%left INC DEC

// This is supposed to make function arguments tight.
%left pat_args

// The start token becomes a parser function in the compiled code.
%start program

%%

syn_type:
    | IDENT                                 { AST.NamedType($1) }
    | lambda_type                           { AST.FunctionType($1) }
    | tuple_type                            { AST.TupleType($1) }
    | array_type                            { AST.ArrayType($1) }
    | struct_type                           { AST.StructType($1) }

tuple_type:
    | TUPLE LT type_list GT                 { $3 }

array_type:
    | ARRAY LT syn_type GT                  { $3 }

lambda_type:
    | LAMBDA LT type_list GT                { $3 }

struct_type:
    | STRUCT LT type_list GT                { $3 }

type_list:
    | syn_type COMMA type_list              { $1 :: $3 }
    | syn_type                              { [$1] }

// TODO: In the future we want to separate expressions with a newline but
// this means changing the lexer.
sep:
    | SEMI                                  {}

program:
    | decls expr EOF                        { AST.Program($1, Some $2) }
    | decls EOF                             { AST.Program($1, None) }
    | EOF                                   { AST.Program([], None) }

decls:
    | decl decls                            { $1 :: $2 }
    | decl                                  { [$1] }
    |                                       { [] }

decl:
    | OPEN IDENT                            { AST.Open($2) }
    | LET IDENT ASSIGN expr                 { AST.Let($2, $4) }

expr:
    | constant                              { AST.Constant $1 }
    | LPAREN expr RPAREN                    { $2 }
    | variable_expr                         { $1 }
    | postfix_expr                          { $1 }
    | prefix_expr                           { $1 }
    | infix_expr                            { $1 }
    | tuple_expr                            { $1 }
    | array_expr                            { $1 }
    | dict_expr                             { $1 }
    | mod_expr                              { $1 }
    | struct_expr                           { $1 }
    | union_expr                            { $1 }
    | index_lookup_expr                     { $1 }
    | lambda_expr                           { $1 }
    | call_expr                             { $1 }

call_expr:
    | IDENT call_args                       { AST.CallExpression($1, $2) }

call_args:
    | LPAREN call_args_list RPAREN          { $2 }

call_args_list:
    | expr COMMA call_args_list             { $1 :: $3 }
    | expr                                  { [$1] }
    |                                       { [] }

// Identifier: someid
variable_expr:
    | IDENT                                 { AST.Variable($1) }

// Lambda: lambda (arg0:type0, arg1:type1, arg2, ... argn:typen)[:type] { expr }
lambda_expr:
    | LAMBDA lambda_args lambda_body                    { AST.Lambda($2, AST.UnknownType, $3) }
    | LAMBDA lambda_args COLON syn_type lambda_body     { AST.Lambda($2, $4, $5) }

lambda_body:
    | LCURLY expr RCURLY                    { $2 }

lambda_args:
    | LPAREN lambda_args_list RPAREN        { $2 }

lambda_args_list:
    | lambda_arg COMMA lambda_args_list     { $1 :: $3 }
    | lambda_arg                            { [$1] }
    |                                       { [] }

lambda_arg:
    | IDENT                                 { AST.UntypedParameter($1) }
    | IDENT COLON syn_type                  { AST.TypedParameter($1, $3) }

// Index lookup: expr[expr]
index_lookup_expr:
    | expr LBRACK expr RBRACK               { AST.IndexedLookup($1, $3) }

// Module: module { ... }
mod_expr:
    | MODULE LCURLY expr RCURLY             { AST.Module }

// Struct: struct { ... }
struct_expr:
    | STRUCT LCURLY struct_fields RCURLY    { AST.Struct($3) }

struct_fields:
    | struct_field struct_fields            { $1 :: $2 }
    | struct_field                          { [$1] }

struct_field:
    | IDENT COLON syn_type                  { AST.StructField($1, $3) }

// Union: union {
//     Lambda: int
//     Function: string
// }
union_expr:
    | UNION LCURLY union_fields RCURLY      { AST.Union($3) }

union_fields:
    | union_field union_fields              { $1 :: $2 }
    | union_field                           { [$1] }

union_field:
    | IDENT COLON syn_type                  { AST.TypedUnionField($1, $3) }
    | IDENT                                 { AST.UnTypedUnionField($1) }

// Tuple: tuple { ... }
tuple_expr:
    | TUPLE LCURLY tuple_entry_list RCURLY  { AST.TupleLiteral($3) }

tuple_entry_list:
    | tuple_entry tuple_entry_list          { $1 :: $2 }
    | tuple_entry                           { [$1] }

tuple_entry:
    | expr sep                              { $1 }
    | expr                                  { $1 }

// Array: array { ... }
array_expr:
    | ARRAY LCURLY array_entry_list RCURLY  { AST.ArrayLiteral($3) }

array_entry_list:
    | array_entry array_entry_list          { $1 :: $2 }
    | array_entry                           { [$1] }

array_entry:
    | expr sep                              { $1 }
    | expr                                  { $1 }

// Dictionary: dictionary { ... }
dict_expr:
    | DICT LCURLY dict_entry_list RCURLY   { AST.DictionaryLiteral($3) }

dict_entry_list:
    | dict_entry dict_entry_list            { $1 :: $2 }
    | dict_entry                            { [$1] }

dict_entry:
    | expr COLON expr sep                   { ($1, $3) }
    | expr COLON expr                       { ($1, $3) }

postfix_expr:
    | expr INC                              { AST.PostfixExpression("inc", $1) }
    | expr DEC                              { AST.PostfixExpression("dec", $1) }

prefix_expr:
    | INC expr %prec PINC                   { AST.PrefixExpression("inc", $2) }
    | DEC expr %prec PDEC                   { AST.PrefixExpression("dec", $2) }
    | WAVE expr %prec WAVE                  { AST.PrefixExpression("bnot", $2) }
    | BANG expr %prec BANG                  { AST.PrefixExpression("not", $2) }
    | MINUS expr %prec PMIN                 { AST.PrefixExpression("neg", $2) }

infix_expr:
    | expr STAR expr                        { AST.InfixExpression("mul", $1, $3) }
    | expr DIV expr                         { AST.InfixExpression("div", $1, $3) }
    | expr MOD expr                         { AST.InfixExpression("mod", $1, $3) }
    | expr PLUS expr                        { AST.InfixExpression("add", $1, $3) }
    | expr MINUS expr                       { AST.InfixExpression("sub", $1, $3) }
    | expr LT expr                          { AST.InfixExpression("lt", $1, $3) }
    | expr LTE expr                         { AST.InfixExpression("le", $1, $3) }
    | expr GT expr                          { AST.InfixExpression("gt", $1, $3) }
    | expr GTE expr                         { AST.InfixExpression("ge", $1, $3) }
    | expr NE expr                          { AST.InfixExpression("ne", $1, $3) }
    | expr EQ expr                          { AST.InfixExpression("eq", $1, $3) }
    | expr AMP expr                         { AST.InfixExpression("band", $1, $3) }
    | expr BAR expr                         { AST.InfixExpression("bor", $1, $3) }
    | expr HAT expr                         { AST.InfixExpression("bxor", $1, $3) }
    | expr RSHIFT expr                      { AST.InfixExpression("rshift", $1, $3) }
    | expr LSHIFT expr                      { AST.InfixExpression("lshift", $1, $3) }

constant:
    | UNIT                                  { AST.Unit }
    | TRUE                                  { AST.Boolean(true) }
    | FALSE                                 { AST.Boolean(false) }
    | INT8                                  { AST.Int8($1) }
    | INT16                                 { AST.Int16($1) }
    | INT32                                 { AST.Int32($1) }
    | INT64                                 { AST.Int64($1) }
    | UINT8                                 { AST.Uint8($1) }
    | UINT16                                { AST.Uint16($1) }
    | UINT32                                { AST.Uint32($1) }
    | UINT64                                { AST.Uint64($1) }
    | IEEE32                                { AST.Float32($1) }
    | IEEE64                                { AST.Float($1) }
    | STRING                                { AST.String($1) }

// module:
//     | MODULE IDENT { }